Oh dear.

The gist of this is that I never really considered that, with multiplexed cells:

WellSample is the pool (has a name and a description)
BioSample is the sample (also has a name and a description)

"Library" should be the possibly-munged BioSample name but due to legacy Hesiod
not handling barcodes I've been using ws_name.

In smrtino/ParseXML.py I have three functions:

*** 1 ***

get_runmetadata_info(xmlfile)

This is called by compile_bc_info.py to get information about the run,
but it's being used to read files like:

1_B01/metadata/m84140_240116_183509_s2.metadata.xml
(actully it's called on the copy in the root of the output dir)

And these files have info about the cell, but also about the run.

Returns:
ExperimentId ChipType InstrumentType CreatedBy TimeStampedName

So it is getting run info, but it's getting it from the per-cell file.

This function does not account for the utf-16 bug. And yet it looks like it was run
on runs like r84140_20231018_154254 and worked. What the heck is going on?

If I run the script manually it fails:

/lustre-gseg/home/pipeline/smrtino/v3.1.1/compile_bc_info.py ~/test_sequel/r84140_20231018_154254/1_C01/pb_formats/m84140_231018_155043_s3.hifi_reads.bc1002.consensusreadset.xml -r ~/test_sequel/r84140_20231018_154254/1_C01/metadata/m84140_231018_155043_s3.metadata.xml

So did I make a fixed version of the XML, or did it fail in the 2023 runs and I didn't notice, or what?

I make a fixed version of the XML in the output dir. So it worked in the pipeline. Right.

*** 2 ***

get_metadata_info(xmlfile)

This is called by make_summary.py and it does need to have the UTF fix because
make_summary.py reads the original version of the file.

Returns run and cell info as well as the barcodes for the cell.

*** 3 ***

get_readset_info(xmlfile)

This is now called by compile_bc_info.py which runs it on the .consensusreadset.xml file. It yields
info like:

_filename: m84140_231018_155043_s3.hifi_reads.bc1002.consensusreadset.xml
_parts:
- reads
_readset_type: ccsreads
barcode: bc1002  (* see note below)
cell_id: m84140_231018_155043_s3
cell_uuid: 3933601b-9710-4836-94ea-75803cc8f0f2
readset_type: ConsensusReadSet (HiFi)
run_id: r84140_20231018_154254
run_slot: 1_C01
ws_desc: ''
ws_name: 28850RL0004L02
ws_project: '28850'

So a "readset" is one barcode (or unassigned or all). The comments say that this can be deleted but clearly
it cannot as it's the only function that reads this file. The file does tell us the barcode under
BioSample/DNABarcodes but compile_bc_info.py does not read this - instead it infers the barcode from
the file name.

As an aside, for the cell m84140_240116_183509_s2 would I have got the right sample name if I'd read the
BioSample rather than the WellSample? Yes - the BioSample name is 28850RL0006L01 but the WellSample
is 28850RLpool01.

But for cell m84140_231018_155043_s3 the WellSample name and the BioSample name are both 28850RL0004L02,
and to get the pool name I look in... oh, wait, that's a singleton.

What about cell m84140_231018_162059_s4? Here the pool name is in the WellSample name but the library
name is in the BioSample name. Right, so it's consistent. And my code is wrong.

This is going to take some unpicking, but it's maybe not as bad as I feared.

First question - am I parsing XML anywhere else in this code?
No, apart from in strip_readset_resources which is a thing in itself.

So, to do:

1) Rename the functions to:

get_metadata_summary() - for use on the raw input data

get_metadata_info() - for use at the processing stage

get_readset_info() - ditto

And for the last of this, get both the ws_name and the bs_name, and audit all use
of ws_name to make sure I have this right. Cool.

I've fixed up the tests first.

--

It looks like there is no good way to see if a dataset comes from unassigned reads. How annoying. I'll work something out!
Yes - weirdly it's if the BioSample barcodes are meta info or sample info? This will surely change in a future release.

--

The 'cell_uuid' came from the ConsensusReadset tag but I changed it to come from the CollectionMetadata tag.
They are different. Why did I change? And does it matter?

Yes it matters: the cell_uuid is used by link_to_smrtlink.py to make the links to SMRTLink. So I need to check this is
working and the links are correct. And that the link is correct whether I read the metadata or the readset XML. I should be
able to check with this:

https://egcloud.bio.ed.ac.uk/smrtino/r84140_20240116_162812/1_B01-m84140_240116_183509_s2.html

But SMRTLink currently has a certificate problem. So I can't see it. Hopefully John can fix this...
well I think I fixed it so go me :-)

Back with the above link the Run QC UUID is 40d, which works.
The cell UUID is 3d1, which also works.

For cell #1 the Run UUID is still 40d, and the cell UUID is 3ff, which works.

Looking at the readset.xml:

3ff is the UniqueId of the ConsensusReadset. The CollectionMetadata UniqueId is 9350, which
links to nothing. So I for reading readset.xml files I deffo need to the root UniqueId
(or the ConsensusReadSetRef UniqueId).

Looking at the metadata.xml:

The 3ff UniqueId is only under ConsensusReadSetRef. Therefore I should take the cell_uuid from
this element. Cool.

---

OK, I have a decision to make. I have a ws_name per readset, which may contain the pool name,
which I care about.

Do I get compile_cell_info.py to add a combined name for the cell, or do I rely on the summarizing
scripts to make one? compile_cell_info.py currently does not read any of the files if just makes
a file that links out to them. Actually, no, that's not true...

In pacbio_scripts, get_revio_yml.py reads the outputs from compile_cell_info.py and gets 'cell_id',
'run_id' and 'run_slot'. These have come from args.bcfiles[0] and this IS read by compile_cell_info.py
and we assume the values will all be the same. I think we need to:

1) Extract ws_name and ws_desc too
2) Sanity check that all are the same, rather than just taking the first.

Right. Done. Need to test, though.

Now in the report I am seeing ws_desc, ws_name and ws_project under the SMRT cell info. So adding ws_name
and ws_desc has made them magically appear. But I had ws_project there already? Why?
Because I explicitly add it in make_report.py! So I think I want to modify this logic and read bs_project
cos that is more definitive.
