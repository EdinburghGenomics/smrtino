Runs from now on are going to be given K123 numbers which tie in to the Access database
and will be entered into the "ExperimentId" field. This has some consequences for SMRTino:

1) The run as saved in /lustre-gseg/smrtlink/sequel_seqdata/ will be in a subdirectory,
so at present SMRTino can't find it unless we make a symlink manually.

2) The K number wants to appear in the report. It gets saved explicitly to
.m64175e_221012_112607.run.metadata.xml (note: it's a hidden file) but we don't currently
read this (I think?) so we need to either read it or else get the K number implictly
from the consensusreadset.xml.

First question, does the syntax:

X="${X:-y}"

work if the original X is a list? Yes it does. Cool. With or without the "". We can
use this for $RUN_NAME_REGEX. The idea is that we'll allow RUN_NAME_REGEX to be a list,
and allow any match. We'll also allow it to have / chars to trigger drilling into subdirs.

But how? I could glob for * and */* but this gets inefficient and only supports 1 level down.
How about a recursive strategy? If the directory matches a regex, then process that directory.
Else if it matches a partial regex, list the subdirs and push them on the stack, then
proceed. Let's make a test script.

test/scratch/list_runs_test.sh

Done. And it works nicely, even though it's added a fair amount of code to what was a simple
loop. Folded into driver.sh. Note that when I deploy the new code I should clear up the
symlink(s) in /lustre-gseg/smrtlink/sequel_seqdata/ because there is no mechanism to
detect dupes. On the other hand, since the run is complete it will just be scanned twice and
skipped so maybe it's not a problem.

OK, final part is to report the K number in the report and the e-mail.

In the make_report rule of Snakefile.report, pb_run_status.py is called and the output is fed to
the make_report.py script in order to get the "About this run" section at the top. I could get
pb_run_status.py to read from XML files but I don't think that's the best idea, especially since
the files do not appear until a cell is complete.

I think I need to treat this like the get_qc_link() function which scans for the info in the info.yml
files. So the actual extraction would need to be by compile_cell_info.py, which currently reads
m64175e_221028_133532.consensusreadset.xml. What does it get from there?

OK I added the run info - see test/compile_cell_info/m64175e_221028_133532.info2.yml for an example.

And I've fixed it to appear in the report. For the e-mail, I realise it should happen automatically
because it shows the full directory path for the run - so that's cool.
