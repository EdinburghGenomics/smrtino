#!/bin/bash
# vim: ft=python

# Contents >>>
#   + Embedded BASH script to bootstrap the workflow
#   + Initialisation and configuration
#   + Helper functions
#   + The rules specific to this workflow
#   + More generic rules

# Note this workflow is designed to run locally. All of the heavy lifting should
# have been done by Snakefile.process_cells. It's vaguely useful to have locking here
# as we might possibly try to make 2 interim reports at once (in which case, just let
# one fail).

"""true" ### Begin shell script part
set -u

source "`dirname $0`"/shell_helper_functions.sh

export TOOLBOX="$(find_toolbox)"
export TEMPLATES="$(find_templates)"
export PATH="${PATH}:$(dirname "$0")"

snakerun_single "$0" "$@"

"exit""" ### End of shell script part
#!/usr/bin/env snakemake
import yaml
from snakemake.utils import format
def glob():
    """Regular glob() is useful but it can be improved like so.
    """
    from glob import glob
    return lambda p: sorted( (f.rstrip('/') for f in glob(os.path.expanduser(p))) )
glob = glob()

TOOLBOX = 'env PATH="{}:$PATH"'.format(os.environ['TOOLBOX'])

""" Report will be made based upon all the .info.yml files found. There may be none.
    Also we may or may not have some plots to add.
"""
INFO_YML = glob("*.info.yml")
STATS_PLOTS = glob("sequelstats_plots/*/.done")

# This may well be a temporary problem, but we shouldn't ignore it.
assert len(INFO_YML) >= len(STATS_PLOTS), \
    "Number of plots is greater than the number of .yml files. Report would be inconsistent."

# We shall make a single report for the whole run. This is supposed to be fairly simple.
# If it gets complex we might need a more sophisticated report making strategy.
rule report_main:
    output: "all_reports/run_report.html"
    input:
        pan   = "all_reports/run_report.{cc}cells.pan".format(cc=len(INFO_YML))
    params:
        templates = os.environ.get('TEMPLATES', '.')
    shell:
        '''{TOOLBOX} pandoc -f markdown \
                                --template={params.templates}/template.html \
                                --include-in-header={params.templates}/javascript.js.html \
                                --include-in-header={params.templates}/local.css.html \
                                --toc --toc-depth=4 \
                                -o {input.pan}.html {input.pan}
           ln -sr {input.pan}.html {output}
        '''

# This rule marshalls all the .png images and makes the report in PanDoc format.
rule make_report:
    output: "all_reports/run_report.{cc}cells.pan"
    input:
        yaml = INFO_YML,
        plots = "sequelstats_plots/.done",
        blob_plots = glob("blob/*.png"),
        histo_plots = glob("histo/*.png"),
    shell:
        '''shopt -s nullglob
           mkdir -p all_reports/img
           ln -srnt all_reports/img blob/*.png || true
           ln -srnt all_reports/img histo/*.png || true
           ln -srnt all_reports/img sequelstats_plots/*.png || true
           make_report.py -o {output} -s <(pb_run_status.py) {input.yaml}
        '''

# Makes some nice plots using the sequelstats package. See doc/sequelstats.txt
# Due to flakiness, this needs to tolerate missing input data, indicated by a
# non-zero value in an {input} file.
rule sequelstats_plots:
    output: "sequelstats_plots/.done"
    input: STATS_PLOTS
    params:
        thumbsize = "600x600"
    shell:
        '''outdir="sequelstats_plots"
           rm -rf $outdir/stats
           for f in {input} ; do
             if [[ "`cat $f`" -eq 0 ]] ; then
                for _set in Hn HpSn HpSp ; do
                    mkdir -p $outdir/stats/$_set
                    ln -srn "`dirname $f`"/stats/$_set/* $outdir/stats/$_set
                done
             fi
           done
           if [ -e $outdir/stats ] ; then
             {TOOLBOX} sequelstats_plot "`readlink -f $outdir`"/stats "$(basename $(pwd))"
             for p in "$outdir"/stats/*.png ; do
                mv -t "$outdir" "$p"
                ( cd "$outdir" ; pbase=`basename "$p" .png` ; \
                  {TOOLBOX} convert "$pbase".png -resize {params.thumbsize} "$pbase".__thumb.png )
             done
           fi
           touch {output}
        '''
