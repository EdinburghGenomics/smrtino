#!/bin/bash
# vim: ft=python

# Contents >>>
#   + Embedded BASH script to bootstrap the workflow
#   + Initialisation and configuration
#   + Helper functions
#   + The rules specific to this workflow
#   + More generic rules

# Note this workflow is designed to run locally. All of the heavy lifting should
# have been done by Snakefile.process_cells. It's vaguely useful to have locking here
# as we might possibly try to make 2 interim reports at once (in which case, just let
# one fail).

"""true" ### Begin shell script part
set -u

source "`dirname $0`"/shell_helper_functions.sh

export TOOLBOX="$(find_toolbox)"
export TEMPLATES="$(find_templates)"
export PATH="${PATH}:$(dirname "$0")"

snakerun_single "$0" "$@"

"exit""" ### End of shell script part
#!/usr/bin/env snakemake
import yaml
from snakemake.utils import format
from glob import glob

TOOLBOX = 'env PATH="{}:$PATH"'.format(os.environ['TOOLBOX'])

""" Report will be made based upon all the .info.yml files found. There may be none.
"""
INFO_YML = glob("*.info.yml")

# We shall make a single report for the whole run. This is supposed to be fairly simple.
# If it gets complex we might need a more sophisticated report making strategy.
rule report_main:
    output: "all_reports/run_report.html"
    input:
        pan = "all_reports/run_report.{cc}cells.pan".format(cc=len(INFO_YML))
    params:
        templates = os.environ.get('TEMPLATES', '.')
    shell:
        '''{TOOLBOX} pandoc -f markdown \
                                --template={params.templates}/template.html \
                                --include-in-header={params.templates}/javascript.js.html \
                                --include-in-header={params.templates}/local.css.html \
                                --toc --toc-depth=4 \
                                -o {input.pan}.html {input.pan}
           ln -sr {input.pan}.html {output}
        '''

rule make_report:
    output: "all_reports/run_report.{cc}cells.pan"
    input:  INFO_YML
    shell:
        "make_report.py -o {output} {input}"
